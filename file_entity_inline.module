<?php

/**
 * Implements hook_element_info().
 *
 * Add an additional process and validation callback to control the added file
 * entity fields.
 */
function file_entity_inline_element_info() {
  // Define an array of element names to proceed.
  $extra = array('#process' => array('file_entity_inline_field_widget_process'));

  $elements = array();
  foreach (file_entity_inline_widgets() as $widget_type => $widget) {
    $element_type = isset($widget['element_type']) ? $widget['element_type'] : $widget_type;
    $elements[$element_type] = $extra;
  }

  return $elements;
}

/**
 * An element #process callback for the file entity.
 *
 * Adds the additional file entity fields to the widget.
 */
function file_entity_inline_field_widget_process($element, &$form_state, &$form) {

  // Attach the file entity fields to saved files.
  if ($element['fid']['#value'] && isset($element['#entity_type']) && isset($element['#field_name'])) {

    // Save the entity information as field_attach_form() will change this.
    $entity_type = $element['#entity_type'];
    $bundle = $element['#bundle'];
    $langcode = $element['#language'];

    $file = file_load($element['fid']['#value']);

    $element['entity']['#parents'] = array('files', $file->fid);
    field_attach_form('file', $file, $element['entity'], $form_state, $langcode);

    // Reset the entity information.
    $element['#entity_type'] = $entity_type;
    $element['#bundle'] = $bundle;

    // Add a submit handler to the entire form.
    if (array_search('file_entity_inline_submit', $form['#submit']) === FALSE) {
      $form['#submit'][] = 'file_entity_inline_submit';
    }
  }

  return $element;
}

/**
 * An element #element_validate callback for the file entity.
 *
 * Saves the file entity field values.
 */
function file_entity_inline_submit($form, &$form_state) {
  // Save any files on the page.
  if (!isset($form_state['values']['files'])) {
    return;
  }

  foreach ($form_state['values']['files'] as $fid => $file_values) {
    $file = file_load($fid);
    $file_form_state = array(
      'values' => $file_values,
    );
    field_attach_submit('file', $file, $form, $file_form_state);
    file_save($file);
  }
}

/**
 * Get a list of all supported field widgets.
 */
function file_entity_inline_widgets($reset = FALSE) {
  static $widgets;

  if (!isset($widgets) || $reset) {
    $widgets = array();
    foreach (module_implements('file_entity_inline_widgets') as $module) {
      $module_widgets = module_invoke($module, 'file_entity_inline_widgets');
      foreach ($module_widgets as $type => $widget) {
        $module_widgets[$type]['type'] = $type;
        $module_widgets[$type]['module'] = $module;
      }
      $widgets = array_merge($widgets, $module_widgets);
    }
    drupal_alter('file_entity_inline_widgets', $widgets);
  }

  return $widgets;
}

/**
 * Implements hook_file_entity_inline_widgets().
 */
function file_entity_inline_file_entity_inline_widgets() {
  $widgets = array();
  $widgets['file_generic'] = array(
    'element_type' => 'managed_file',
  );
  $widgets['image_image'] = array(
    'element_type' => 'managed_file',
  );
  return $widgets;
}

